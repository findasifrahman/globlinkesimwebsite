// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model AllPackage {
  id           Int            @id @default(autoincrement())
  packageName  String         @map("package_name")
  packageCode  String         @unique @map("package_code")
  slug         String         @unique
  price        Float
  currencyCode String         @map("currency_code")
  smsStatus    Boolean        @map("sms_status")
  duration     Int
  location     String
  activeType   Int            @map("active_type")
  retailPrice  Float          @map("retail_price")
  speed        String
  multiregion  Boolean        @default(false)
  favourite    Boolean        @default(false)
  operators    String         @default("")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  orders       esimOrderBeforePayment[]
  orderRecords esimOrderAfterPayment[]

  @@index([packageCode])
  @@index([slug])
  @@map("all_packages")
}

model User {
  id                      String                  @id @default(uuid()) @map("user_id")
  name                    String
  username               String                  @unique
  email                  String                  @unique
  password               String?
  country                String?
  address                String?
  emailVerified          DateTime?
  image                  String?
  resetToken             String?                 @unique
  resetTokenExpiry       DateTime?
  verificationToken      String?                 @unique
  verificationTokenExpiry DateTime?
  accounts               Account[]
  sessions               Session[]
  registeredAt           DateTime                @default(now()) @map("registered_at")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  lastLogin              DateTime?               @map("last_login")
  orders                 esimOrderBeforePayment[]
  orderRecords           esimOrderAfterPayment[]
  emailVerificationTokens EmailVerificationToken[]

  @@index([username])
  @@index([email])
  @@map("users")
}

model esimOrderBeforePayment {
  id            String     @id @default(uuid())
  userId        String     @map("user_id")
  packageCode   String     @map("package_code")
  count         Int
  amount        Float      @map("price")
  periodNum     Int        @map("period_num")
  orderNo       String     @unique @map("order_id")
  paymentOrderNo String?   @unique @map("payment_order_no")
  discountCode  String?    @map("discount_code")
  finalAmountPaid Float?   @map("final_amount_paid")
  status        String     @default("PENDING")
  paymentState  String     @default("pending")
  currency      String
  transactionId String     @map("transaction_id")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  package       AllPackage @relation(fields: [packageCode], references: [packageCode])
  user          User       @relation(fields: [userId], references: [id])
  discount      EsimDiscount? @relation(fields: [discountCode], references: [discountCode])
  dataUsageLogs DataUsageLog[]
  validityUsageLogs ValidityUsageLog[]
  esimStatusLogs EsimStatusLog[]

  @@index([userId])
  @@index([packageCode])
  @@index([orderNo])
  @@index([status])
  @@unique([orderNo, id])
  @@map("esim_order_before_payment")
}

model DataUsageLog {
  id            Int          @id @default(autoincrement())
  orderNo       String       @map("order_no")
  transactionId String       @map("transaction_id")
  usageData     String       @map("usage_data")
  createdAt     DateTime     @default(now()) @map("created_at")
  order         esimOrderBeforePayment @relation(fields: [orderNo, transactionId], references: [orderNo, id])

  @@index([orderNo])
  @@map("data_usage_logs")
}

model ValidityUsageLog {
  id            Int          @id @default(autoincrement())
  orderNo       String       @map("order_no")
  transactionId String       @map("transaction_id")
  usageData     String       @map("usage_data")
  createdAt     DateTime     @default(now()) @map("created_at")
  order         esimOrderBeforePayment @relation(fields: [orderNo, transactionId], references: [orderNo, id])

  @@index([orderNo])
  @@map("validity_usage_logs")
}

model EsimStatusLog {
  id            Int          @id @default(autoincrement())
  orderNo       String       @map("order_no")
  transactionId String       @map("transaction_id")
  statusData    String       @map("status_data")
  createdAt     DateTime     @default(now()) @map("created_at")
  order         esimOrderBeforePayment @relation(fields: [orderNo, transactionId], references: [orderNo, id])

  @@index([orderNo])
  @@map("esim_status_logs")
}

model WebhookEvent {
  id            String   @id @default(cuid())
  type          String   // ORDER_STATUS, ESIM_STATUS, DATA_USAGE, VALIDITY_USAGE
  orderNo       String
  transactionId String?
  iccid         String?
  payload       Json
  createdAt     DateTime @default(now())
}

model esimOrderAfterPayment {
  id            String   @id @default(cuid())
  orderNo       String   @unique @map("order_id")
  paymentOrderNo String? @unique @map("payment_order_no")
  discountCode  String?  @map("discount_code")
  finalAmountPaid Float? @map("final_amount_paid")
  userId        String   @map("user_id")
  user          User     @relation(fields: [userId], references: [id])
  packageCode   String   @map("package_code")
  package       AllPackage @relation(fields: [packageCode], references: [packageCode])
  status        String   // PENDING, PROCESSING, READY_FOR_DOWNLOAD, COMPLETED, FAILED
  esimStatus    String?  // IN_USE, USED_UP, USED_EXPIRED, UNUSED_EXPIRED, CANCEL, REVOKED
  smdpStatus    String?  // ENABLED, DISABLED, RELEASED, DELETED, INSTALLATION
  dataRemaining Int?     // in bytes
  dataUsed      Int?     // in bytes
  expiryDate    DateTime?
  daysRemaining Int?
  qrCode        String?  // Base64 encoded QR code
  iccid         String?  // ICCID of the eSIM
  paymentState  String   @default("pending")
  paidAmount    Decimal  @db.Decimal(10, 2)
  transactionId String
  currency      String
  pmId          String   @map("pm_id")
  pmName        String   @map("pm_name")
  isTopUp       Boolean  @default(false) @map("is_top_up")
  topUpTransactionId String? @map("top_up_transaction_id")
  topUpAmount   Decimal? @db.Decimal(10, 2) @map("top_up_amount")
  topUpDate     DateTime? @map("top_up_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  esimProfile   EsimProfile?

  @@index([userId])
  @@index([packageCode])
  @@index([orderNo])
  @@index([status])
  @@index([isTopUp])
  @@map("esim_order_after_payment")
}

model EsimProfile {
  id        String   @id @default(cuid())
  orderId   String   @unique
  qrCode    String?
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     esimOrderAfterPayment @relation(fields: [orderId], references: [id])

  @@map("esim_profiles")
}

model EsimDiscount {
  id                String   @id @default(cuid())
  refererId         String   @map("referer_id")
  refererName       String   @unique @map("referer_name")
  discountCode      String   @unique
  discountPercentage Float   @map("discount_percentage")
  isActive          Boolean  @default(true) @map("is_active")
  expireDate        DateTime @map("expire_date")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  orders            esimOrderBeforePayment[]

  @@index([refererId])
  @@index([discountCode])
  @@map("esim_discounts")
}

model PaymentWebhookState {
  id            String      @id @default(uuid())
  orderId       String      @map("order_id")
  status        String      @default("pending") // pending, completed, failed
  transactionId String?     @map("transaction_id")
  pmId          String      @map("pm_id")
  amount        Decimal     @db.Decimal(10, 2)
  currency      String
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  userId        String?     @map("user_id")

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@map("payment_webhook_states")
}

// prisma/schema.prisma
model ProcessingQueue {
  id         String   @id @default(cuid())
  orderNo    String   @map("order_no")
  type       String   // ESIM_ORDER_PROCESSING, etc.
  status     String   // PENDING, COMPLETED, FAILED
  error      String?
  retryCount Int      @default(0)
  lastAttempt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([orderNo])
  @@map("processing_queue")
}